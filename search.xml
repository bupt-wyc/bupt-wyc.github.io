<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql数据库安全加固实验报告</title>
      <link href="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/"/>
      <url>/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL数据库安全加固"><a href="#MySQL数据库安全加固" class="headerlink" title="MySQL数据库安全加固"></a>MySQL数据库安全加固</h3><h4 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 实验目的"></a>一、 实验目的</h4><p>1、了解MySQL数据库几种常见威胁</p><p>2、掌握几种常见的安全加固方式</p><h4 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、 实验环境"></a>二、 实验环境</h4><p>主机：Windows 7虚拟机</p><p>配置：MySQL5.5</p><h4 id="三、-实验原理"><a href="#三、-实验原理" class="headerlink" title="三、 实验原理"></a>三、 实验原理</h4><p>Mysql数据库安全配置、或者叫加固属于风险模型中的一环，主要涉及用户、权限、日志、远程等方面。</p><p>安装完MySQL后，有些版本系统默认会创建一个无用户名无密码的匿名用户（也叫空用户），空用户的存在可能会导致新建本地可以登录的用户可能会无法登录；mysql对本地文件的存取是通过SQL语句来实现，主要是通过Load DATA LOCAL INFILE来实现，我们能够通过禁用该功能来防止黑客通过SQL注射等获取系统核心文件；Mysql默认有error日志文件输出，默认在data文件夹，安全加固要求一般要求有以下几种日志：查询日志、错误日志、二进制日志、更新日志、慢查询日志，开启日志能够防止在发生故障的时间点，尚有脏页未写入磁盘，在重启<a href="https://www.2cto.com/database/MySQL/">mysql</a>服务的时候，根据log进行重做，从而达到事务的持久性这一特性；最后就是禁止网络连接，防止猜解密码攻击、溢出攻击、和嗅探攻击。</p><h4 id="四、-实验步骤和结果"><a href="#四、-实验步骤和结果" class="headerlink" title="四、 实验步骤和结果"></a>四、 实验步骤和结果</h4><p>实验环境配置</p><p>1、运行安装包安装mysql5.5</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E08.tmp.jpg" alt="img"> </p><p>选择typical，之后一直默认选项next</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E19.tmp.jpg" alt="img"> </p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E1A.tmp.jpg" alt="img"> </p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E2B.tmp.jpg" alt="img"> </p><p>端口号选择3306</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E3B.tmp.jpg" alt="img"> </p><p>点击next，到设置密码界面，密码设置为123456，</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E4C.tmp.jpg" alt="img"> </p><p>安装完成</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E4D.tmp.jpg" alt="img"> </p><p>2、将mysql安装目录下的bin文件夹添加到系统变量path中</p><p>C:\Program Files\MySQL\MySQL Server 5.5\bin</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E5E.tmp.jpg" alt="img"> </p><p>打开cmd验证</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E6E.tmp.jpg" alt="img"> </p><p>实验步骤</p><p>\1. 打开cmd</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E7F.tmp.jpg" alt="img"> </p><p>\2. 输入密码，登录到root。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E80.tmp.jpg" alt="img"> </p><p>\3. 查询Mysql 的版本，查看版本号。运行命令“select version();”数据库中所有的命令均已“;”结尾。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8E90.tmp.jpg" alt="img"> </p><p>\4. 第一种常见的安全加固方式是删除空用户，执行命令，删除空用户即可解决。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8EB1.tmp.jpg" alt="img"> </p><p>\5. 第二种常见的安全防固方式是防止文件注入。mysql对本地文件的存取是通过SQL语句来实现，主要是通过Load DATA LOCAL INFILE来实现，我们能够通过禁用该功能来防止黑客通过SQL注射等获取系统核心文件。首先双击桌面左下角的【文件夹】图标。</p><p>在弹出的窗口中点击【本地磁盘（C:）】选项，在界面右侧左键双击“tools”文件夹（以实际设备MySQL安装位置为准），双击MySQL文件夹，进入MySQL目录。找到文件名为“my”的配置文件，双击打开，在配置文件末尾加上local-infile=0</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8EC1.tmp.jpg" alt="img"> </p><p>\6. 第三种常见的安全防固方式是日志输出。Mysql默认有error日志文件输出，默认在data文件夹，安全加固要求一般要求有以下几种日志：查询日志、错误日志、二进制日志、更新日志、慢查询日志。具体过程如下：在刚才找到my文件的基础下，找到当前目录下的data文件夹，双击打开。打开data文件后，单击地址栏。将data的位置进行复制，进入到“my”配置文件。在文件底部添上如下内容。（具体的目录地址依照刚才复制的data的目录）。log:查询日志;log-error：错误日志,log-bin:二进制日志;log-slow-queries：慢查询日志。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8EC2.tmp.jpg" alt="img"> </p><p>\7. 修改配置文件后需要重启mysql服务。先关闭mysql</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8ED3.tmp.jpg" alt="img"> </p><p>\8. 开启mysql服务</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8EE4.tmp.jpg" alt="img"> </p><p>\9. 重新启动后打开data文件夹，发现多了四个文件</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8EF4.tmp.jpg" alt="img"> </p><p>\10. 第四种常见的安全防固方式是禁止远程访问。禁止网络连接，防止猜解密码攻击、溢出攻击、和嗅探攻击。在配置文件my.ini中添加skip-networking参数使 MySQL 服务不监听任何 TCP/IP 连接，增加安全性。首先重启mysql。添加skip-networking参数后启动mysql</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F05.tmp.jpg" alt="img"> </p><p>\11. 重启mysql</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F15.tmp.jpg" alt="img"> </p><p>\12. 开一个cmd窗口，输入命令ipconfig，得到当前连接网络的IPv4地址</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F16.tmp.jpg" alt="img"> </p><p>\13. 用得到的IP进行连接，连接失败，证明TCP/IP服务已关，禁止进行远程访问</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F27.tmp.jpg" alt="img"> </p><p>实验预期</p><p>\1. 直接输入mysql时，无法连接，证明匿名用户已删除</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F38.tmp.jpg" alt="img"> </p><p>\2. 使用mysql数据库</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F48.tmp.jpg" alt="img"> </p><p>\3. 将mysql数据库中的user表的内容注入到1.txt文件中（1.txt是计算机中任意一文件），执行失败，证明配置成功，已禁止文件注入。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F49.tmp.jpg" alt="img"> </p><p>\4. 开启日志之前，data文件夹中只有关于库的两个文件夹。启动后打开data文件夹，发现多了四个文件，证明日志开启成功</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F5A.tmp.jpg" alt="img"> </p><p>\5. 在配置文件中添加skip-networking参数，并重启mysql</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F6B.tmp.jpg" alt="img"> </p><h4 id="五、-实验收获"><a href="#五、-实验收获" class="headerlink" title="五、 实验收获"></a>五、 实验收获</h4><p>在本次数据库安全加固实验中，我学习到了利用mysql的一些指令来对数据局进行安全加固的方法，加深了我的专业认识，同时也让我了解到了数据库安全的重要性，和初步学习到了一些安全保护措施，这次实验只是初步了解网络安全中数据库安全的基础知识</p><p>​      遇到的问题，基本上没啥问题，唯一的大概就是应该用管理员运行，以及更改权限的问题</p><h4 id="六、-实验思考"><a href="#六、-实验思考" class="headerlink" title="六、 实验思考"></a>六、 实验思考</h4><p>实验思考</p><p>\1. 如何指定一个IP地址访问。</p><p>解决方案：</p><p>授权用户root使用密码‘123456’从指定ip为192.168.223.134的主机连接到mysql服务器</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;</p><p>flush privileges;</p><p>授权用户root使用密码‘123456’从任意主机连接到mysql服务器</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;</p><p>flush privileges;</p><p>\2. 如何更好的提高数据库的安全防护能力？</p><p>【发现】对于 DLP（数据丢失防护）来说，首先，数据发现至关重要。这其中包括确定文件所有人以及他们掌握文件的原因和使用方法。确认文件使用者以及文件是否得到保护的最佳方法就是扫描服务器、数据库、硬盘与网络设备。这样便可以知道数据在网络中的生成、储存、访问、更改与传送的方法，进而探测、识别、分析与了解静态数据与动态数据的情况。<br> 【分级】其次，必须通过政策与控制找到储存在资料库中的静态数据并且对其进行分级与保护。高级数据库探查软件能够搜索整个网络从而找到数据生产情况与恶意数据库并扫描资料库。人们应该定期进行网络扫描，从而查找那些违反政策规定的行为并且发送警报以立刻进行纠正。能够对数据进行索引与分级的解决方案使得人们可以更加轻松地去询问与了解敏感数据及其使用情况、所有者、储存地与扩增情况。此外，数据库中的数据应该得到加密与备份。<br> 【防护】我们还需要明白那些在网络中流转的动态数据也是有效数据探查的重要内容。捕捉技术能够收集与记录数周、甚至数月的网络流量。它们分析数据类型从而确定标准数据与专有数据，然后制定有效的政策以防止和控制数据内容流传到网络之外。如果想要防止内部人士恶意破坏网络，那么就必须要对数据进行加密。当设备损失或失窃时，还要防止他人进行未授权访问。</p><p><em><strong>*将虚拟机的网络模式改为桥接模式，并关闭防火墙*</strong></em></p><p>\1. 将配置文件中的****skip-networking****参数去掉，并重启mysql服务。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F7B.tmp.jpg" alt="img"> </p><p>2.登陆mysql，选择mysql数据库，查看里面的user表：</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F7C.tmp.jpg" alt="img"> </p><p>其中，host代表允许登陆的ip地址，user为用户名，password为密码的md5加密</p><p>第一行 host的localhost表示只允许本机登陆，第二行host的%表示允许任意ip登陆</p><p>此时，我们使用ip为192.168.124.128的kali虚拟机进行远程登陆，发现允许登录</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F8D.tmp.jpg" alt="img"> </p><p>删除host为%的root用户：</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8F9D.tmp.jpg" alt="img"> </p><p>再次使用kali进行连接，发现被拒绝</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8FAE.tmp.jpg" alt="img"> </p><p>使用命令</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’10.38.29.81’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;</p><p>flush privileges;</p><p>第一行中，10.38.29.81是kali虚拟机的地址，这个是允许远程访问的IP的值。自行改为其他值。这里可以使用%来表示所有IP。</p><p>root是账户名，后面的123456是密码。</p><p>第二行是使设置立刻生效。</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8FBF.tmp.jpg" alt="img"> </p><p><em><strong>*查看user表*</strong></em></p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8FC0.tmp.jpg" alt="img"> </p><p>在使用被允许的kali机进行登录</p><p><img src="/bupt-wyc.github.io/2021/11/16/xin-xi-xi-tong-an-quan-shi-yan-di-san-ci/wps8FD0.tmp.jpg" alt="img"> </p><p>用另一台win10系统电脑登陆，也显示拒绝访问</p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiyan </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学整理第一部分： 极限and连续</title>
      <link href="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/"/>
      <url>/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="数学整理第一部分：极限and连续"><a href="#数学整理第一部分：极限and连续" class="headerlink" title="数学整理第一部分：极限and连续"></a>数学整理第一部分：极限and连续</h2><p>数学整理这一部分我大概会持续更新至我考研前两个月，所以内容均会由我本人思忖后纳入</p><p>一些基础知识的掌握，可以为后续的解题提供更多的思路，使解题更加顺畅！</p><p>常见数列前n项和公式：</p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116013946370.png" alt="image-20211116013946370"></p><p>三角函数还是要弄明白了，各种换算关系，有利于微分和积分的运算，运算的速度还是很重要的</p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116180216630.png" alt="image-20211116180216630"></p><p>倍角公式和半角公式</p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116181225224.png" alt="image-20211116181225224"></p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116181236590.png" alt="image-20211116181236590"></p><p>积化和差与和差化积公式</p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116182137361.png" alt="image-20211116182137361"></p><p>万能三角代换公式 u =tanx/2 sinx=2u/1+u方  cosx=1-u方/1+u方</p><p>常用因式分解公式：</p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116192203716.png" alt="image-20211116192203716"></p><p>常用不等式：</p><p><img src="/bupt-wyc.github.io/2021/11/16/shu-xue-zheng-li-di-yi-bu-fen-ji-xian-and-lian-xu/image-20211116192253013.png" alt="image-20211116192253013"></p><h5 id="下面开始正式进入连续与极限了"><a href="#下面开始正式进入连续与极限了" class="headerlink" title="下面开始正式进入连续与极限了"></a>下面开始正式进入连续与极限了</h5>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> zongjie </tag>
            
            <tag> xuexi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统内核实验第四次报告</title>
      <link href="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/"/>
      <url>/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/</url>
      
        <content type="html"><![CDATA[<h3 id="操作系统内核实验第四次"><a href="#操作系统内核实验第四次" class="headerlink" title="操作系统内核实验第四次"></a>操作系统内核实验第四次</h3><h4 id="2019661801班-2019522005-王雨宸"><a href="#2019661801班-2019522005-王雨宸" class="headerlink" title="2019661801班          2019522005          王雨宸"></a>2019661801班          2019522005          王雨宸</h4><h4 id="步骤一：设置中断描述符表来处理-CPU-中断"><a href="#步骤一：设置中断描述符表来处理-CPU-中断" class="headerlink" title="步骤一：设置中断描述符表来处理 CPU 中断"></a>步骤一：设置中断描述符表来处理 CPU 中断</h4><p>cd interrupts</p><p>make</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115192607679.png" alt="image-20211115192607679"></p><p>qemu-system-i386 –fda os-image.bin</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115192801205.png" alt="image-20211115192801205"></p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115192723814.png" alt="image-20211115192723814"></p><h4 id="步骤二：-完成中断实现和-CPU-计时器"><a href="#步骤二：-完成中断实现和-CPU-计时器" class="headerlink" title="步骤二： 完成中断实现和 CPU 计时器"></a>步骤二： 完成中断实现和 CPU 计时器</h4><p>cd interrupts-irqs</p><p>make</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115193130610.png" alt="image-20211115193130610"></p><p>qemu-system-i386 –fda os-image.bin</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115193231516.png" alt="image-20211115193231516"></p><h4 id="步骤三：-实现我们的第一个-IRQ-处理程序-CPU-计时器和键盘"><a href="#步骤三：-实现我们的第一个-IRQ-处理程序-CPU-计时器和键盘" class="headerlink" title="步骤三： 实现我们的第一个 IRQ 处理程序:CPU 计时器和键盘"></a>步骤三： 实现我们的第一个 IRQ 处理程序:CPU 计时器和键盘</h4><p>cd interrupts-timer</p><p>make</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115193441298.png" alt="image-20211115193441298"></p><p>qemu-system-i386 –fda os-image.bin</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115193525202.png" alt="image-20211115193525202"></p><h4 id="步骤四：-设计命令行界面并解析用户输入"><a href="#步骤四：-设计命令行界面并解析用户输入" class="headerlink" title="步骤四： 设计命令行界面并解析用户输入"></a>步骤四： 设计命令行界面并解析用户输入</h4><p>cd shell</p><p>make</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115193814677.png" alt="image-20211115193814677"></p><p>qemu-system-i386 –fda os-image.bin</p><p><img src="/bupt-wyc.github.io/2021/11/15/cao-zuo-xi-tong-nei-he-shi-yan-di-si-ci/image-20211115193857947.png" alt="image-20211115193857947"></p><p>作业：</p><p>阅读代码画出在系统键盘输入中断流程。</p><p>设计一个进入命令行之前的登录界面，用户名 root，密码 root</p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> shiyan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件安全栈溢出实验报告</title>
      <link href="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/"/>
      <url>/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/</url>
      
        <content type="html"><![CDATA[<h2 id="软件安全实验报告第二次-栈溢出"><a href="#软件安全实验报告第二次-栈溢出" class="headerlink" title="软件安全实验报告第二次-栈溢出"></a>软件安全实验报告第二次-栈溢出</h2><h3 id="2019522005-王雨宸"><a href="#2019522005-王雨宸" class="headerlink" title="2019522005 王雨宸"></a>2019522005 王雨宸</h3><h4 id="一、实验目标："><a href="#一、实验目标：" class="headerlink" title="一、实验目标："></a>一、实验目标：</h4><h5 id="1-通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生"><a href="#1-通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生" class="headerlink" title="(1) 通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生"></a>(1) 通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生</h5><h5 id="2-完成淹没相邻变量改变程序流程实验"><a href="#2-完成淹没相邻变量改变程序流程实验" class="headerlink" title="(2) 完成淹没相邻变量改变程序流程实验"></a>(2) 完成淹没相邻变量改变程序流程实验</h5><h5 id="3-完成淹没返回地址改变程序流程实验"><a href="#3-完成淹没返回地址改变程序流程实验" class="headerlink" title="(3) 完成淹没返回地址改变程序流程实验"></a>(3) 完成淹没返回地址改变程序流程实验</h5><h4 id="二、实验步骤与结果："><a href="#二、实验步骤与结果：" class="headerlink" title="二、实验步骤与结果："></a>二、实验步骤与结果：</h4><h5 id="先来分析下代码："><a href="#先来分析下代码：" class="headerlink" title="先来分析下代码："></a>先来分析下代码：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PASSWORD</span> <span class="token string">"1234567"</span></span><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> authenticated<span class="token punctuation">;</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>authenticated<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here!</span><span class="token keyword">return</span> authenticated<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> valid_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span> fp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"password.txt"</span><span class="token punctuation">,</span><span class="token string">"rw+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>valid_flag <span class="token operator">=</span> <span class="token function">verify_password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>valid_flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"incorrect password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratulation! You have passed the verification!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="观察代码块：发现存在有两个函数1-strcmp-2-strcpy"><a href="#观察代码块：发现存在有两个函数1-strcmp-2-strcpy" class="headerlink" title="观察代码块：发现存在有两个函数1.strcmp 2.strcpy"></a>观察代码块：发现存在有两个函数1.strcmp 2.strcpy</h6><h6 id="strcmp：比较两字符串，相等返回0-strcpy：-将后者中的字符串拷贝至前者-，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证"><a href="#strcmp：比较两字符串，相等返回0-strcpy：-将后者中的字符串拷贝至前者-，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证" class="headerlink" title="strcmp：比较两字符串，相等返回0  strcpy： 将后者中的字符串拷贝至前者 ，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证"></a>strcmp：比较两字符串，相等返回0  strcpy： 将后者中的字符串拷贝至前者 ，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证</h6><h5 id="然后判断函数栈的调用过程："><a href="#然后判断函数栈的调用过程：" class="headerlink" title="然后判断函数栈的调用过程："></a>然后判断函数栈的调用过程：</h5><h6 id="从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify-password压入栈中：如下："><a href="#从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify-password压入栈中：如下：" class="headerlink" title="从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify_password压入栈中：如下："></a>从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify_password压入栈中：如下：</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> authenticated<span class="token punctuation">;</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// add local buff authenticated=strcmp(password,PASSWORD); </span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here! </span><span class="token keyword">return</span> authenticated<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="如buffer【8】先定义先入栈，故而按authenticated，buffer8-的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符-0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西"><a href="#如buffer【8】先定义先入栈，故而按authenticated，buffer8-的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符-0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西" class="headerlink" title="如buffer【8】先定义先入栈，故而按authenticated，buffer8 的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符\0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西"></a>如buffer【8】先定义先入栈，故而按authenticated，buffer8 的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符\0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西</h6><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114225644578.png" alt="image-20211114225644578"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114225744403.png" alt="image-20211114225744403"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114230046558.png" alt="image-20211114230046558"></p><h6 id="可以看到返回值是-1的补码"><a href="#可以看到返回值是-1的补码" class="headerlink" title="可以看到返回值是-1的补码"></a>可以看到返回值是-1的补码</h6><h5 id="输入1234567时："><a href="#输入1234567时：" class="headerlink" title="输入1234567时："></a>输入1234567时：</h5><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114230248196.png" alt="image-20211114230248196"></p><h5 id="由上一个测试对比，可以看到已经到达栈顶，且返回值是0"><a href="#由上一个测试对比，可以看到已经到达栈顶，且返回值是0" class="headerlink" title="由上一个测试对比，可以看到已经到达栈顶，且返回值是0"></a>由上一个测试对比，可以看到已经到达栈顶，且返回值是0</h5><h5 id="然后输入12345678进行测试"><a href="#然后输入12345678进行测试" class="headerlink" title="然后输入12345678进行测试"></a>然后输入12345678进行测试</h5><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114231156250.png" alt="image-20211114231156250"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114231646991.png" alt="image-20211114231646991"></p><h6 id="可以看到已经覆盖上了"><a href="#可以看到已经覆盖上了" class="headerlink" title="可以看到已经覆盖上了"></a>可以看到已经覆盖上了</h6><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><p>8位的buffer[8] + 4位的 anthenticated + 4位的EBP + shellcode</p><p>shellcode中存放要返回的地址</p><p>即congratulations…shellcode = 0x00401116</p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114232313054.png" alt="image-20211114232313054"></p><p>输入的是1234…….</p><p>储存的是ascII码，对应的内容是31323334 小端存储，故为34333231</p><p>所以应该逆转输出 06 11 40 00</p><p>使用UltraEdit 生成payload</p><p>先输入12341234123412340000</p><p>按ctrl + h 进入16进制编译，并修改最后4字节</p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114234123282.png" alt="image-20211114234123282"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114234205860.png" alt="image-20211114234205860"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114234630489.png" alt="image-20211114234630489"></p><p>完成</p><h4 id="三、实验结论："><a href="#三、实验结论：" class="headerlink" title="三、实验结论："></a>三、实验结论：</h4><p>栈溢出很大程度影响了实验结果</p><h4 id="四、以下是思考题："><a href="#四、以下是思考题：" class="headerlink" title="四、以下是思考题："></a>四、以下是思考题：</h4><p>在不修改源代码的情况下，修改OverFlow_EXE程序的流程，通过弧注入的方式，不植入可执行代码，让其调用MessageBoxA函数（函数地址：0x77E23D68）弹出对话框（对话框显示bupt），之后调用ExitProcess函数（函数地址：0x77E7B0BB）退出进程。</p><p>构建正确的payload</p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114235117670.png" alt="image-20211114235117670"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114235625329.png" alt="image-20211114235625329"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114235636236.png" alt="image-20211114235636236"></p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiyan </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zaishishi</title>
      <link href="/bupt-wyc.github.io/2021/10/26/zaishishi/"/>
      <url>/bupt-wyc.github.io/2021/10/26/zaishishi/</url>
      
        <content type="html"><![CDATA[<p><img src="/bupt-wyc.github.io/2021/10/26/zaishishi/aee4504b619ac1f449181662f7852d3.jpg" alt="我好帅"></p>]]></content>
      
      
      
        <tags>
            
            <tag> shishi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/bupt-wyc.github.io/2021/09/27/hello-world/"/>
      <url>/bupt-wyc.github.io/2021/09/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>zhaojiayi</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
