<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件安全栈溢出实验报告</title>
      <link href="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/"/>
      <url>/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/</url>
      
        <content type="html"><![CDATA[<h2 id="软件安全实验报告第二次-栈溢出"><a href="#软件安全实验报告第二次-栈溢出" class="headerlink" title="软件安全实验报告第二次-栈溢出"></a>软件安全实验报告第二次-栈溢出</h2><h3 id="2019522005-王雨宸"><a href="#2019522005-王雨宸" class="headerlink" title="2019522005 王雨宸"></a>2019522005 王雨宸</h3><h4 id="一、实验目标："><a href="#一、实验目标：" class="headerlink" title="一、实验目标："></a>一、实验目标：</h4><h5 id="1-通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生"><a href="#1-通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生" class="headerlink" title="(1) 通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生"></a>(1) 通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生</h5><h5 id="2-完成淹没相邻变量改变程序流程实验"><a href="#2-完成淹没相邻变量改变程序流程实验" class="headerlink" title="(2) 完成淹没相邻变量改变程序流程实验"></a>(2) 完成淹没相邻变量改变程序流程实验</h5><h5 id="3-完成淹没返回地址改变程序流程实验"><a href="#3-完成淹没返回地址改变程序流程实验" class="headerlink" title="(3) 完成淹没返回地址改变程序流程实验"></a>(3) 完成淹没返回地址改变程序流程实验</h5><h4 id="二、实验步骤与结果："><a href="#二、实验步骤与结果：" class="headerlink" title="二、实验步骤与结果："></a>二、实验步骤与结果：</h4><h5 id="先来分析下代码："><a href="#先来分析下代码：" class="headerlink" title="先来分析下代码："></a>先来分析下代码：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PASSWORD</span> <span class="token string">"1234567"</span></span><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> authenticated<span class="token punctuation">;</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>authenticated<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here!</span><span class="token keyword">return</span> authenticated<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> valid_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span> fp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"password.txt"</span><span class="token punctuation">,</span><span class="token string">"rw+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>valid_flag <span class="token operator">=</span> <span class="token function">verify_password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>valid_flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"incorrect password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratulation! You have passed the verification!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="观察代码块：发现存在有两个函数1-strcmp-2-strcpy"><a href="#观察代码块：发现存在有两个函数1-strcmp-2-strcpy" class="headerlink" title="观察代码块：发现存在有两个函数1.strcmp 2.strcpy"></a>观察代码块：发现存在有两个函数1.strcmp 2.strcpy</h6><h6 id="strcmp：比较两字符串，相等返回0-strcpy：-将后者中的字符串拷贝至前者-，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证"><a href="#strcmp：比较两字符串，相等返回0-strcpy：-将后者中的字符串拷贝至前者-，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证" class="headerlink" title="strcmp：比较两字符串，相等返回0  strcpy： 将后者中的字符串拷贝至前者 ，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证"></a>strcmp：比较两字符串，相等返回0  strcpy： 将后者中的字符串拷贝至前者 ，若长度大于则可能会发生栈溢出，判断问题可能会出现在这，在ollydbg里验证</h6><h5 id="然后判断函数栈的调用过程："><a href="#然后判断函数栈的调用过程：" class="headerlink" title="然后判断函数栈的调用过程："></a>然后判断函数栈的调用过程：</h5><h6 id="从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify-password压入栈中：如下："><a href="#从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify-password压入栈中：如下：" class="headerlink" title="从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify_password压入栈中：如下："></a>从低地址压入，使用参数，返回地址，调用函数，开辟新的栈空间，esp更新位置，随后将子函数verify_password压入栈中：如下：</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> authenticated<span class="token punctuation">;</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// add local buff authenticated=strcmp(password,PASSWORD); </span><span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here! </span><span class="token keyword">return</span> authenticated<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="如buffer【8】先定义先入栈，故而按authenticated，buffer8-的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符-0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西"><a href="#如buffer【8】先定义先入栈，故而按authenticated，buffer8-的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符-0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西" class="headerlink" title="如buffer【8】先定义先入栈，故而按authenticated，buffer8 的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符\0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西"></a>如buffer【8】先定义先入栈，故而按authenticated，buffer8 的顺序入栈，由于是从低地址往高地址存放，假若输入1234567为密码，算上结束符\0，正好8位占满，所以当输入的数据超过8位后就可以覆盖了上边的返回地址，aufenticated等有关程序正确的东西</h6><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114225644578.png" alt="image-20211114225644578"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114225744403.png" alt="image-20211114225744403"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114230046558.png" alt="image-20211114230046558"></p><h6 id="可以看到返回值是-1的补码"><a href="#可以看到返回值是-1的补码" class="headerlink" title="可以看到返回值是-1的补码"></a>可以看到返回值是-1的补码</h6><h5 id="输入1234567时："><a href="#输入1234567时：" class="headerlink" title="输入1234567时："></a>输入1234567时：</h5><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114230248196.png" alt="image-20211114230248196"></p><h5 id="由上一个测试对比，可以看到已经到达栈顶，且返回值是0"><a href="#由上一个测试对比，可以看到已经到达栈顶，且返回值是0" class="headerlink" title="由上一个测试对比，可以看到已经到达栈顶，且返回值是0"></a>由上一个测试对比，可以看到已经到达栈顶，且返回值是0</h5><h5 id="然后输入12345678进行测试"><a href="#然后输入12345678进行测试" class="headerlink" title="然后输入12345678进行测试"></a>然后输入12345678进行测试</h5><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114231156250.png" alt="image-20211114231156250"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114231646991.png" alt="image-20211114231646991"></p><h6 id="可以看到已经覆盖上了"><a href="#可以看到已经覆盖上了" class="headerlink" title="可以看到已经覆盖上了"></a>可以看到已经覆盖上了</h6><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><p>8位的buffer[8] + 4位的 anthenticated + 4位的EBP + shellcode</p><p>shellcode中存放要返回的地址</p><p>即congratulations…shellcode = 0x00401116</p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114232313054.png" alt="image-20211114232313054"></p><p>输入的是1234…….</p><p>储存的是ascII码，对应的内容是31323334 小端存储，故为34333231</p><p>所以应该逆转输出 06 11 40 00</p><p>使用UltraEdit 生成payload</p><p>先输入12341234123412340000</p><p>按ctrl + h 进入16进制编译，并修改最后4字节</p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114234123282.png" alt="image-20211114234123282"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114234205860.png" alt="image-20211114234205860"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114234630489.png" alt="image-20211114234630489"></p><p>完成</p><h4 id="三、实验结论："><a href="#三、实验结论：" class="headerlink" title="三、实验结论："></a>三、实验结论：</h4><p>栈溢出很大程度影响了实验结果</p><h4 id="四、以下是思考题："><a href="#四、以下是思考题：" class="headerlink" title="四、以下是思考题："></a>四、以下是思考题：</h4><p>在不修改源代码的情况下，修改OverFlow_EXE程序的流程，通过弧注入的方式，不植入可执行代码，让其调用MessageBoxA函数（函数地址：0x77E23D68）弹出对话框（对话框显示bupt），之后调用ExitProcess函数（函数地址：0x77E7B0BB）退出进程。</p><p>构建正确的payload</p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114235117670.png" alt="image-20211114235117670"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114235625329.png" alt="image-20211114235625329"></p><p><img src="/bupt-wyc.github.io/2021/11/14/di-er-ci-zuo-ye-2019661801-2019522005-wang-yu-chen/image-20211114235636236.png" alt="image-20211114235636236"></p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> shiyan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zaishishi</title>
      <link href="/bupt-wyc.github.io/2021/10/26/zaishishi/"/>
      <url>/bupt-wyc.github.io/2021/10/26/zaishishi/</url>
      
        <content type="html"><![CDATA[<p><img src="/bupt-wyc.github.io/2021/10/26/zaishishi/aee4504b619ac1f449181662f7852d3.jpg" alt="我好帅"></p>]]></content>
      
      
      
        <tags>
            
            <tag> shishi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/bupt-wyc.github.io/2021/09/27/hello-world/"/>
      <url>/bupt-wyc.github.io/2021/09/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>zhaojiayi</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
